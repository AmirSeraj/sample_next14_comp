1. npm i iron-session

2.in main root create a lib folder: lib >> authConfig.ts
2.1. in authConfig.ts:
-----------------------------
import { SessionOptions } from "iron-session";
export interface SessionData {
  user?: [];
  token?: string;
  isLoggedIn: boolean;
}
export const sessionOptions: SessionOptions = {
  password: process.env.SECRET_KEY!,
  cookieName: "auth",
  cookieOptions: {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production", 
  },
};
export const defaultSession: SessionData = {
  isLoggedIn: false,
};
--------------------------------
2.2. in order to get SECRET_KEY you can use opnssl rand -base64 32 paste this in .env file:
SECRET_KEY= 'NgLhmQ3ijUnzxDDcqcDRy71ZOnLF0Kz4LKf+eATQXJo='
NODE_ENV = development

in .env file :
# change NODE_ENV to production in production mode
NODE_ENV = development 

point: in development mode this (secure) should be false but in production mode should be true.

3. create getSession function: create a file (getSession.ts) in actions file:
----------------------------------------
'use server'
import { getIronSession } from "iron-session";
import { SessionData, defaultSession, sessionOptions } from "../authConfig";
import { cookies } from "next/headers";

/**get session */
export const getSession = async () => {
  const session = await getIronSession<SessionData>(cookies(), sessionOptions);

  if (!session.isLoggedIn) {
    session.isLoggedIn = defaultSession.isLoggedIn;
  }
  return session;
};
-----------------------------------------

4.in Navar:
------------------
const Navar = async () => {
  const session = await getSession();
  {session.isLoggedIn && <LogoutForm />}
}
-------------------





