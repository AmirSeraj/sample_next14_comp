npx shadcn-ui@latest init  ////***follow instructions in Forms > zod page
npx shadcn-ui@latest add form
npx shadcn-ui@latest add input
npx shadcn-ui@latest add button
npx shadcn-ui@latest add card
npm i react-icons


-----CardWrapper.tsx---------------------------------------------------------------------
in components > auth > loginComp > CardWrapper.tsx

import { Card, CardContent, CardFooter, CardHeader } from "../../ui/card";
import BackButton from "@/components/auth/BackButton";
import Social from "@/components/auth/Social";
import { Header } from "@/components/auth/Header";

interface CardWrapperProps {
  children: React.ReactNode;
  headerLabel: string;
  headerTitle: string;
  backButtonLabel: string;
  backButtonHref: string;
  showSocial?: boolean;
}

export const CardWrapper = ({
  children,
  headerLabel,
  headerTitle,
  backButtonLabel,
  backButtonHref,
  showSocial,
}: CardWrapperProps) => {
  return (
    <Card className="w-[400px] shadow-lg">
      <CardHeader>
        <Header label={headerLabel} title={headerTitle} />
      </CardHeader>
      <CardContent>{children}</CardContent>
      {showSocial && (
        <CardFooter>
          <Social />
        </CardFooter>
      )}
      <CardFooter>
        <BackButton
          label={backButtonLabel}
          href={backButtonHref}
        />
      </CardFooter>
    </Card>
  );
};

-----Social.tsx---------------------------------------------------------------------
in components > auth > Social.tsx
"use client";
import { FcGoogle } from "react-icons/fc";
import { FaGithub } from "react-icons/fa";
import { Button } from "../ui/button";

const Social = () => {
  return (
    <div className="flex items-center w-full gap-x-2">
      <Button
        size={"lg"}
        className="w-full"
        variant={"outline"}
        onClick={() => {}}
      >
        <FcGoogle className="h-5 w-5" />
      </Button>
      <Button
        size={"lg"}
        className="w-full"
        variant={"outline"}
        onClick={() => {}}
      >
        <FaGithub className="h-5 w-5" />
      </Button>
    </div>
  );
};

export default Social;

-----Header.tsx---------------------------------------------------------------------
in components > auth > Header.tsx

import { Poppins } from "next/font/google";
import clsx from "clsx";

const font = Poppins({
  subsets: ["latin"],
  weight: ["600"],
});

interface HeaderProps {
  label: string;
  title: string;
}

export const Header = ({ label, title }: HeaderProps) => {
  return (
    <div className="w-full flex flex-col gap-y-4 items-center justify-center">
      <h1 className={clsx("text-3xl font-semibold drop-shadow-xl", font)}>üîê {title}</h1>
      <p className="text-muted-foreground text-sm">{label}</p>
    </div>
  );
};

-----BackButton.tsx---------------------------------------------------------------------
in components > auth > BackButton.tsx

import React from "react";
import { Button } from "../ui/button";
import Link from "next/link";

interface BackButtonProps {
  label: string;
  href: string;
  className: string;
}

const BackButton = ({ label, href, className }: BackButtonProps) => {
  return (
    <Button
      className="font-normal w-full no-underline"
      variant={"link"}
      size={"sm"}
      asChild
    >
      <Link href={href} className={className}>
        {label}
      </Link>
    </Button>
  );
};

export default BackButton;

-----LoginFormServerSide.tsx------------------------------------------------------------------------------
in components make a folder: components > auth > loginComp > LoginFormServerSide.tsx

import {
  Form,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "../../ui/form";
import { UseFormReturn } from "react-hook-form";
import * as z from "zod";
import { LoginSchema } from "@/schemas";
import { FormError } from "../../Form/form-error";
import { FormSuccess } from "../../Form/form-success";
import { Button } from "../../ui/button";
import { Input } from "../../ui/input";
import { IoEyeOff } from "react-icons/io5";
import { IoEye } from "react-icons/io5";
import BackButton from "../BackButton";
import Loading from "../../loading/Loading_1/page";

interface FormLoginProps {
  email: string;
  password: string;
}

const LoginFormServerSide = ({
  form,
  onSubmit,
  isPending,
  error,
  success,
  showPassword,
  setShowPassword,
  loading,
}: {
  form: UseFormReturn<FormLoginProps, any, undefined>;
  onSubmit: (values: z.infer<typeof LoginSchema>) => void;
  isPending: boolean;
  error?: string | false;
  success?: string | false;
  showPassword: boolean;
  setShowPassword: React.Dispatch<React.SetStateAction<boolean>>;
  loading: boolean;
}) => {
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <div className="space-y-4">
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>E-mail</FormLabel>
                <FormControl>
                  <Input
                    {...field}
                    disabled={isPending}
                    placeholder="john.doe@example.com"
                    type="email"
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="password"
            render={({ field }) => (
              <FormItem className="relative">
                <FormLabel>Password</FormLabel>
                <FormControl>
                  <Input
                    {...field}
                    disabled={isPending}
                    placeholder="******"
                    type={showPassword ? "text" : "password"}
                  />
                </FormControl>
                <FormMessage />
                <span
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-7 bottom-2 cursor-pointer"
                >
                  {showPassword ? <IoEye size={22} /> : <IoEyeOff size={22} />}
                </span>
              </FormItem>
            )}
          />
          <div className="flex items-center">
            <BackButton
              label={"Forget Password?"}
              href={"/forgetPassword"}
              className="!px-0 !justify-start"
            />
          </div>
        </div>

        {error && <FormError message={error} />}
        {success && <FormSuccess message={success} />}
        <Button type="submit" disabled={isPending} className="w-full">
          {loading ? <Loading /> : "Login"}
        </Button>
      </form>
    </Form>
  );
};

export default LoginFormServerSide;

-----LoginForm.tsx (main page)------------------------------------------------------------------------------
in components make a folder: components > auth > loginComp > LoginForm.tsx

"use client";
import React, { useState, useTransition } from "react";
import { CardWrapper } from "../CardWrapper";
import { useForm } from "react-hook-form";
import { LoginSchema } from "@/schemas";
import * as z from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import LoginFormServerSide from "../LoginFormServerSide";
import { login } from "@/lib/actions/auth/login";

const LoginForm = () => {
  const [error, setError] = useState<string | false | undefined>("");
  const [success, setSuccess] = useState<string | false | undefined>("");
  const [loading, setLoading] = useState<boolean>(false);
  const [isPending, startTransition] = useTransition();
  const [showPassword, setShowPassword] = useState<boolean>(false);

  const form = useForm<z.infer<typeof LoginSchema>>({
    resolver: zodResolver(LoginSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  const onSubmit = (values: z.infer<typeof LoginSchema>) => {
    setError("");
    setSuccess("");
    setLoading(true);
    startTransition(() => {
      login(values).then((data) => {
        setError(data?.error);
        setSuccess(data?.success);
        setLoading(false);
      });
    });
  };

  return (
    <CardWrapper
      headerTitle="Sign in Admin"
      headerLabel="Welcome back!"
      backButtonHref="/register"
      backButtonLabel="Don`t have an account? SignUp"
      showSocial
    >
      <LoginFormServerSide
        onSubmit={onSubmit}
        error={error}
        success={success}
        isPending={isPending}
        form={form}
        showPassword={showPassword}
        setShowPassword={setShowPassword}
        loading={loading}
      />
    </CardWrapper>
  );
};

export default LoginForm;

--------------------------------Create FormError/FormSuccess--------------------
{error && <FormError message={error} />}
in components / auth / forms / FormError.tsx:

import { ExclamationTriangleIcon } from "@radix-ui/react-icons";
interface FormErrorProps {
  message?: string;
}
export const FormError = ({ message }: FormErrorProps) => {
  if (!message) return null;
  return (
    <div className="bg-destructive/15 p-3 rounded-md flex items-center gap-x-2 text-sm text-destructive">
        <ExclamationTriangleIcon className="h-4 w-4" />
        <p>{message}</p> 
    </div>
  );
};
----------------------------------------
in components / auth / forms / FormSuccess.tsx:
import { CheckCircledIcon } from "@radix-ui/react-icons";

interface FormSuccessProps {
  message?: string;
}

export const FormSuccess = ({ message }: FormSuccessProps) => {
  if (!message) return null;
  return (
    <div className="bg-emerald-500/15 p-3 rounded-md flex items-center gap-x-2 text-sm text-destructive text-emerald-500">
      <CheckCircledIcon className="h-4 w-4" />
      <p>{message}</p>
    </div>
  );
};

--------------------------------Additional points--------------------
for input you can modify it in components > ui > input:

import * as React from "react";

import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  standard?: boolean;
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, standard, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          standard &&
            "border-b-2 border-slate-600 border-t-0 border-r-0 border-l-0 rounded-none dark:bg-gray-900 bg-gray-300 shadow-lg drop-shadow-lg dark:shadow-[-10px_-10px_30px_4px_rgba(0,0,0,0.1),_10px_10px_30px_4px_rgba(45,78,255,0.15)]",
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = "Input";

export { Input };

---------------------------------------create LoginSchema -------------------------------
in the root of our project create a folder: schemas > index.ts:

import * as z from "zod";
export const LoginSchema = z.object({
  email: z.string().email({
    message: "E-mail is required!",
  }),
  password: z.string().min(1, {
    message: "Password is required!",
  }),
});

---------------------------------------action-------------------------------------
in lib > actions > auth > login.ts:
"use server";

import { LoginSchema } from "@/schemas";
import * as z from "zod";
import { getSession } from "../getSession";
import { LoggedInUser } from "./loggedInUser";
import { redirect } from "next/navigation";

/**PATH */
const sanctum_path = process.env.NEXT_APP_URL + "sanctum/csrf-cookie";
const login_path = process.env.NEXT_APP_URL + "api/auth/login";
/**PATH */

/**login */
export const login: (values: z.infer<typeof LoginSchema>) => Promise<{
  error: string | false;
  success: string | false;
  // isLoading: false;
}> = async (values: z.infer<typeof LoginSchema>) => {
  ///data validation
  const validatedFields = LoginSchema.safeParse(values);
  if (!validatedFields.success) {
    return { error: "Invalid Credentials!", success: false };
  }

  /**session */
  const session = await getSession();

  //destructuring data
  const { password, email } = validatedFields.data;

  try {
    //CSRF Token
    const csrf_response = await fetch(sanctum_path, {
      method: "GET",
      credentials: "include", //Include credentials for cross-origin requests
    });

    if (csrf_response.ok) {
      try {
        /**login user */
        const res = await fetch(login_path, {
          method: "POST",
          headers: {
            "Content-type": "application/json",
          },
          body: JSON.stringify({
            email: email,
            password: password,
          }),
        });
        const response = await res.json();
        console.log("ress", response);

        if (response.status === "error") {
          return {
            error: response.message,
            success: false,
          }
        }

        if (response.status === "success") {
          session.token = response.token;
          session.isLoggedIn = true;
          await session.save();
        }

        if (session.isLoggedIn) {
          await LoggedInUser(session.token);
        }
      } catch (error) {
        console.log("error2", error);
        return {
          error: "Something Wrong, try again!",
          success: false,
        };
      }
    }
  } catch (error) {
    console.log("error", error);
    return {
      error: "Something Wrong, try again!",
      success: false,
    };
  }
  if (session.isLoggedIn) {
    redirect("/dashboard");
  }
};

--------------------------------------getSession.ts--------------------------------
'use server'

import { getIronSession } from "iron-session";
import { SessionData, defaultSession, sessionOptions } from "../authConfig";
import { cookies } from "next/headers";

/**get session */
export const getSession = async () => {
  const session = await getIronSession<SessionData>(cookies(), sessionOptions);

  if (!session.isLoggedIn) {
    session.isLoggedIn = defaultSession.isLoggedIn;
  }
  return session;
};

---------------------------------.env---------------------
make a folder in the main root of project .env:
NEXT_APP_URL='http://127.0.0.1:8000/'


///////////////////////////////////////////register///////////////////////////////////////
it is completely same except ConfirmPassworm are added:
  const [showConfirmPassword, setShowConfirmPassword] = useState<boolean>(false);

  const form = useForm<z.infer<typeof RegisterSchema>>({
    resolver: zodResolver(RegisterSchema),
    defaultValues: {
      email: "",
      password: "",
      confirmPassword: "",
      name: "",
    },
  });

<FormField
            control={form.control}
            name="confirmPassword"
            render={({ field }) => (
              <FormItem className="relative">
                <FormLabel>Confirm Password</FormLabel>
                <FormControl>
                  <Input
                    {...field}
                    disabled={isPending}
                    placeholder="******"
                    type={showConfirmPassword ? "text" : "password"}
                  />
                </FormControl>
                <FormMessage />
                <span
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute right-7 bottom-2 cursor-pointer"
                >
                  {showConfirmPassword ? <IoEye size={22} /> : <IoEyeOff size={22} />}
                </span>
              </FormItem>
            )}
          />

//////////////////////////////////////////////actions/auth/register.ts////////////////////
and in actions register.ts

'use server'

import { RegisterSchema } from "@/schemas";
import * as z from "zod";
import { getSession } from "../getSession";

/**PATH */
const sanctum_path = process.env.NEXT_APP_URL + "sanctum/csrf-cookie";
const register_path = process.env.NEXT_APP_URL + "api/auth/register";
/**PATH */

/**register user */
export const register: (values: z.infer<typeof RegisterSchema>) => Promise<{
  error: string | false;
  success: string | false;
}> = async (values: z.infer<typeof RegisterSchema>) => {
  ///data validation
  const validatedFields = RegisterSchema.safeParse(values);
  if (!validatedFields.success) {
    return { error: "Invalid Credentials!", success: false };
  }

  /**session */
  const session = await getSession();

  //destructuring data
  const { name, password, confirmPassword, email } = validatedFields.data;

  /** returning error */
  if (password !== confirmPassword) {
    return {
      error: "Password and ConfirmPassword do not match!",
      success: false,
    };
  }

  try {
    //CSRF Token
    const csrf_response = await fetch(
      // process.env.NEXT_APP_URL + "sanctum/csrf-cookie",
      sanctum_path,
      {
        method: "GET",
        credentials: "include", //Include credentials for cross-origin requests
      }
    );

    if (csrf_response.ok) {
      try {
        /**register user */
        const res = await fetch(
          // process.env.NEXT_APP_URL + "api/auth/register",
          register_path,
          {
            method: "POST",
            headers: {
              "Content-type": "application/json",
            },
            body: JSON.stringify({
              email: email,
              password: password,
              name: name,
            }),
          }
        );
        const response = await res.json();
        session.token = response.token;
        // session.isLoggedIn = true;
        // todo: when user register an email sent. question:user can not login? yes? if not this is not true:
        //session.isLoggedIn = true; Email sent but not redirect to any where? yes?
        await session.save();
        return {
          success: "Activation E-mail sent, check your E-mail!",
          error: false,
        };
      } catch (error) {
        console.log("error2", error);
        return {
          error: "Something Wrong, try again!",
          success: false,
        };
      }
    }
  } catch (error) {
    console.log("error", error);
    return {
      error: "Something Wrong, try again!",
      success: false,
    };
  }
};

-------------------------------------
in Schemas index.ts:

export const RegisterSchema = z.object({
  email: z.string().email({
    message: "E-mail is required!",
  }),
  password: z.string().min(6, {
    message: "Minimum 6 characters required!",
  }),
  confirmPassword: z.string().min(6, {
    message: "Minimum 6 characters required!",
  }),
  name: z.string().min(1, {
    message: "Name is required!",
  }),
});

